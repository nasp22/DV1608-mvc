{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}
    <div style="width: 70%;">
        <h2>Introduktion</h2>
        Att ha en bra kodkvalitet, "snygg kod" anses vara mer och mer viktigt.
        Inte bara på grund av underlättande för vidareutveckling rent tidsmässigt och ekonomikst utan även för företaget eller ägarens miljöpåverkan.
        Hur mäter man då om en kod har en god kodkvalitet ? <br>
        I sammanhanget nämns ofta dom 6C:na vilka definerar på ett tydligt sätt parametrrarna i koden som kan mätas:
        <h4>Codestyle</h4>
        Koden har en viss stil och följer ett bestämt "regelverk". Ofta används verktyg för felsöka koden och ge tips eller rent ut sagt ändra kodens stil så den passar enligt bestämda
        önskemål. I denna kurs har vi exempelvis använt oss av "composer Lint". <br> Finns det en tydlig struktur i koden underlättar detta för vidareutveckling och förståelse av koden för utvecklarna. Detta minimerar risk för errors, missförstånd och onödig tid
        för felsökning. Det är svårt att definera en snygg kodstil, men generellt ska koden vara lättöverskådelig och följa samma regeleverk genom hela koden. Några mätparametrar inom
        kodstil kan exempelvis vara indentationer, kommentarer samt struktur av if/else-satser.

        <h4>Coverage</h4>
        Hur stor del/hur många rader eller scenrios av koden täcks av testerna som testar din kod? "Coverage" är ett mått som används för att definera din kod-täckning.
        Vid en enhetstestning testas exempelvis funktioner, metoder och classers förväntade resultat med det verkliga. Genom att veta hur stor del av koden som testas
        stärks trovärdigheten av utkomsten. Även vid vidareutveckling kan god täckning ge en stärre
        fördel. Vid förändringar skulle detta direkt fångas upp om resultatet inte längre är det försväntade. Det är då enkelt att följa upp och åtgärda problemet.

        <h4>Complexity</h4>
        En kods komplexitet kan förklaras som kodens interaktion mellan olika enheter.
        Fler enheter i koden ökar antalet interaktioner och med detta även risken för större påverkan vid förändring av koden.

        <h4>Cohesion</h4>
        Ett värde på hur väl sakerna i en klass hör ihop. I detta fall klassas låga värden som bra värden, vilka kan leda ett högre betyg. Man skulle kunna beskriva
        det som hur en klass fungerar som en enhet, tillsammans med sina metoder. Ju bättre sammanhllning, destå mer visar det på att klassen med dess metoder är förstådd och genomtänkt
        av utvecklaren. Finns en väl sammahållen metod kan denna enkelt fungera ihop med andra väl sammanhängande metoder.

        <h4>Coupling</h4>
        Här mäts kopplingen mellan olika klasser. För att hålla nere rader och metoder i respektive klass är det med fördel att använda fler klasser
        som istället använder sig utav av varandra. Raderna och vägen till kod blir kortare och därmed enklare att hantera. Upprepande kod finns på färre platser och vid föräning minimeras antal platser som behöver påverkas.
        Man kan i kategorin Coupling tala om 2 olika typer av Coupling:<br><br>
        - Afferent coupling (AC):<br>
        Utgående kopplingar är antalet kopplingar klassen använder sig utav. Med andra ord, mängden andra klasser vilka påverkas vid förändringar av denna klass.<br>
        - Efferent koppling (EC):<br>
        Inågående kopplingar är antalet kopplingar denna klass har till andra klasser. Med andra ord, mängden andra klasser vilka vid förändring skulle påverka denna klass.

        <h4>CRAP</h4>
        CRAP står för "Change Risk Analyzer Predictor" och är en uppskattning av den mängd arbete som förväntas krävas för att åtgärda eller hantera dåliga metoder.
        Mätvärdet CRAP påverkas av komplexiteten hos en metod kombinerat med kodtäckningen för den metoden. Det är med andra ord okej med hög komplexitet, så länge kodtäckningen även den är hög.

        <h2>Phpmetrics</h2>
        Det första jag uppmärksammar vid granskning av rapporten är den sammanfattande bilden med cirklar som beskriver balansen mellan "Maintainability/complexity".
        Jag noterar den sista stora röda cirkeln och läser att den motsvarar klassen "CardHand". När jag analyserar klassen CardHand noterar jag att det saknas en
        del kommetarer vid if-satserna i sista metoden..
        Vidare tanke väcks, varför behövs samtliga if-sater i denna metod ? Kan jag ge respektive fall en egen metod ?
        Förbättringsåtgärder är främst att åtgärda komplexiteten för CardHand-metoden och efter detta uttöka
        kommentarerna och följa upp med ny enhetstester för respektive ny metod.
        <figure>
            <figcapture><h3>Före-Bild phpMetrics<h3></figcapture>
            <img src="{{ asset('img/phpmetrix.png') }}" alt="code intellegence" style="width:20%"><br>
        </figure>
        <h2>Scrutinizer</h2>

        Jag blir överraskad när jag ser resultatet från första rapporten. Den ger ett betyg om 6.4 vilket ansågs ganska lågt. Men både code-intellegence och build passerar grönt utan problem, vilket kändes roligt.
        Jag noterar att coverage kan förbättras med vet att detta endast ligger i Controller då både Card och CardHand har över 90% kodtäckning. Flaskhalsar
        borde ligga i dom nya klasserna efter kmom05, Book och Product.
        Dessa saknar nog både kommentarer och enhetstester. Dessa blir sjävklara flaskhalsar att ornda till. Jag noterar även en del issues där jag missat ta bort utskrift
        av "var_Dump" och en del kod som ej används. Då dom länkade scutinizer-badges i README är Live-länkar visas nedan även en print.screen på hur rapporten såg ut före
        implementering av åtgärder, med startvärde 6.94.
        <figure>
            <figcapture>
            <h3>"Före"-bild Scrutinizer:</h3>
            </figcapture>
            <a href="https://scrutinizer-ci.com/g/nasp22/DV1608-mvc/">
                <img src="{{ asset('img/before.jpg') }}" alt="code intellegence" style="width:50%"><br>
            </a>
        </figure>

        <figure>
            <figcapture>
                <h3>"live"-bilder Scrutinizer:</h3>
            </figcapture><br>
            <a href="https://scrutinizer-ci.com/g/nasp22/DV1608-mvc/"><br>
                <img src="{{ asset('https://scrutinizer-ci.com/g/nasp22/DV1608-mvc/badges/quality-score.png?b=main') }}" alt="scrutinizer quality score"><br>
                <img src="{{ asset('https://scrutinizer-ci.com/g/nasp22/DV1608-mvc/badges/coverage.png?b=main') }}" alt="Coverage">
                <img src="{{ asset('https://scrutinizer-ci.com/g/nasp22/DV1608-mvc/badges/code-intelligence.svg?b=main') }}" alt="code intellegence">
                <img src="{{ asset('https://scrutinizer-ci.com/g/nasp22/DV1608-mvc/badges/build.png?b=main') }}" alt="Build">
            </a>
        </figure>

        <h2>Förbättringar</h2>
        Detta är beskrivet en del i ovan rubriker men sammafattningsvis ska följande åtgärdes implementeras:<br><br>
        - Minska komplexiteten i CardHand genom fördelning av fler metoder<br>
        - Tilldela kommentarer CardHand<br>
        - Enhetstester till CardHands nya metoder<br>
        - Kommentarer till klasserna Book och Product<br>
        - Enhetstester till klasserna Book och Product<br>
        - Åtgärda en del issues, exempelvis oanvända variablar samt utskrift av "var_dump"<br><br>

        Förväntingar på phpMetrics är att bilden med cirklarna ska ge ett result med en mindre samt ej röd cirkel gällande klassen CardHand. Förhoppning finns
        att värdet för scrutinizer ska öka samt att coverage ska få högre procentsats.
        Troligen kommer inte procenten öka drastiskt på Coverage då Contorller drar ned snittet. Däremot vet jag att jag har nästintill 100% coverage på samtliga av mina egna
        skapade klasser och metoder.

        <h2> Implemetering och Analys</h2>
        Resultat efter implementering av förändringar i mätverkyget phpmetrics visas som en förändring av den sista röda cirklen som förväntat. Cirkeln visas nu som en gul cirkel.
        Resultatet efter åtgärder av olika issues i Scrutinizer visar till en början förvånande ingen förändring trots relativt stora genomförda förändringar.
        Efter letande på discord upptäcks det att jag med
        fördel borde excluderat /tools vilka hade en majorotet med kritiska åtgärder som behövde åtgärdas.
        Efter exkludering av  /tools visadese ett mycket bättre resultat, dock gjorde detta det svårt att veta exakt hur mycket min egna åtgärd i
        min kod förändrades då det i dåläget motsvarande en väldigt liten procent av totalen och vad startvärdet egentligen var är omöjligt att riktigt veta.
        <h3>Förändring i bilder:</h3>
        <div class="row">
            <figure>
                <figcapture>
                    <h3>Före-Bild phpMetrics</h3>
                </figcapture>
                <img src="{{ asset('img/phpmetrix.png') }}" alt="php before" style="width:50%">
            </figure>

            <figure>
                <figcapture>
                    <h3>Efter-Bild phpMetrics</h3>
                </figcapture>
                <img src="{{ asset('img/phpmetricsa.png') }}" alt="php after" style="width:50%"
            </figure>
        </div>

        <div class="row">
            <figure>
                <figcapture>
                    <h3>Före-Bild Scrutinizer (Ink /tools)</h3>
                </figcapture>
                <img src="{{ asset('img/before.jpg') }}" alt="code intellegence" style="width:70%">
            </figure>
            <figure>
                <figcapture>
                    <h3>Efter-Bild Scrutinizer (Ink /tools)</h3>
                </figcapture>
                <img src="{{ asset('img/after.jpg') }}" alt="php after" style="width:70%">
            </figure>
        </div>
        <figure>
    <figcapture>
                <h3>Efter-Bild Scrutinizer (Ink /tools)</h3>
            </figcapture>
            <img src="{{ asset('img/innantools.jpg') }}" alt="php after" style="width:40%">
        </figure>
        <figure>
            <figcapture>
                <h3>Efter-Bild Scutinizer (/tools exkulderat)</h3>
            </figcapture>
            <img src="{{ asset('img/result.jpg') }}" alt="php after" style="width:80%"
        </figure>

        <h2>Diskussion</h2>
        Till en början förstod jag nog inte hur bra min kod egentligen var, då hade jag från början förstott att något inte var helt rätt. När resultatet från scutinizer visade
        6.94 blev jag glad och stolt
        och fortsatte sedan rapporten. Jag kunde inte heller se så många fel som jag själv kan påverka och trodde då att min implemenringtng skulle ge ett nytt slutbetyg på kanske
        runt 8-9p.
        Efter att jag noterade att min implementering inte påverkade resutlatet blev jag misstänksam. Jag noterade då att min egen kod var i extrem
        minoritet mot det som inkluderas i /tools vilka enligt Scrutinizer innehöll nästan 8000 major issues. Hur mycket jag än skulle förändra min egen kod så var den
        fortfarande i sådan minoritet att det inte skulle påverka slutresultatet. Jag letade upp en tidiagre diskussion i Discord och lyckades sedan excludera filerna i /tools.
        Efter en ny analys med Srutinizer visades istället ett betyg på 9.4. Det var en stor förändring och nyfikenhet väcktes då såklart över hur mycket mina åtgärder påverkade
        betyget och vilken var min slutpoäng egentligen om jag hade exkluderat /tools från början. Jag tror att min poäng hade legat runt 7-8 utan /tools.
        Lärdom är att höra mig för, fråga och prata med andra studenter, vad är rimligt ? <br>

        Min coverage ökade med endast en ynka procent. Detta då controller här ligger som majoritet. Jag testade att excludera controller och då fick jag en ökning på ca 73%, men då jag hellre ser riktiga siffror tar jag inte med detta.
        Jag vet att min egna skrivna klasser ligger på +90%. Nästa steg skulle i sådant fall vara att försöka testa controller och även Repository. <br<

        Förändingen i phpMetrics gav resultat enligt förväntning. Åtgärden hos metoden resulterade i en gul cirkel och jag är nöjd med resultatet. Jag tycker det var bilden
        på ett tydligt sätt visar reltionen mellan storleken, complexiteten och underhåll. Jag som är estetiskt lagd ser gärna sådana här beskrivande bilder. Det hjälper att se för att sedan förstå förändingarna lättare hos mig. <br>

        Jag tror att arbeta enligt clean code är till en stor fördel, speciellt på större företag där flera avdelningar och personalteam utvecklar tillsammans.
        När man arbetar i ett team tror jag att det är en stor fördel att samtliga som påverkar vet vad det är som gäller och alla har ett regelverk att följa.
        Det sparar företaget tid och pengar med mindre felsökning och troligen mindre antal fel. I större kod med stora framtidplaner där den ska utvecklas under längre tid tror jag bara det är fördelaktigt att arbtea med clean code.
        Jag kan tänka mig att nackdelar kan vara att även detta är tidskrävande på sitt sätt. Ska det utföras en mindree avancerad kod som ej ska utvecklas så kan tiden att
        efterspela clean-code inte alls kanske vara värt det.
        Jag som extremt kreativ person tycker om att sväva iväg lite och testa mina egna saker. Att strikt arbeta efter regelverk kan jag tänka mig påverkar utecklingen av kod.
        Hur lär vi oss nya saker? Ofta är det genom misstag och om vi inte får möjlighet att stöta på dessa tror jag att det blir svårt med utveckling. Det vore ändå lite tråkigt
        om samtliga utvecklare tillslut sitter och göra samma saker och forskningen inte kommer frammåt pga den aspekten. Språket hos oss utvecklas hela tiden pga av att vi själva förändrara den under tiden,
        skulle någon vara där och rätta våra munnar konstant skulle vi inte komma på nya kortare ord som faktiskt sparat oss "tid" och "energi".
    </div>
{% endblock %}