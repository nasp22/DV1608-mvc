{% extends "base.html.twig" %}

{% block title %}Redovisa{% endblock %}

{% block body %}
<div class="two-col-layout">
            <aside class="aside">
                <p> Genvägar: </p>
                <ul>
                <li><a href="#kmom01">kmom01</a></li>
                <li><a href="#kmom02">kmom02</a></li>
                <li><a href="#kmom03">kmom03</a></li>
                <li><a href="#kmom04">kmom04</a></li>
                <li><a href="#kmom05">kmom05</a></li>
                <li><a href="#kmom06">kmom06</a></li>
                <li><a href="#kmom10">kmom10</a></li>
                </ul>
            </aside>
            <article class="article">
                <h2 id="kmom01">kmom01</h2>
                <p>Tidigare kunskaper inom objektorientering har skapats i och med avklarade kurserna Oopython och Javascript.
                Jag anser mig efter dessa kurser börja förstå objektorientering och tankesättet kring detta. Det är ett sätt att arbeta och tänka
                på och kräver planering/rätt tänk från början. Det var som svårast att gå från Python-kursen till Oopython.
                Just därför att planeringen verkligen kräver att man från början tänker objektorienterat. Nu känns det mer naturligt.</p>
                <p>
                Strukturen i PHP av klasser och objekt känns därmed inte helt främmade och den ser relativt likadan ut.
                Det består av ”properies” vilka sätter ett ”state” till respektive objekt och följt av ”metoder” vilka är funktioner som vi kan
                göra i klassen för att på olika sätt påverka objektet eller få utskrifter. På samma sätt i
                både Javascirpt och Python kan en ”constructor” sättas viken då sätter ingående argument vid
                skapande av objektet, som en slags init-funktion. </p>
                <p>Kodbasen och strukturen känns inte främmande. Det är som en kombination av tidigare uppbyggnad
                från kurserna javascript, Oopython och Webtec.
                Det som känns mest främmande nu är syntaxen för just PHP vilket känns som en lång tid
                sedan vi arbetade med. Men det kommer man nog snart in i igen. </p>
                <p>Mitt TIL för detta kmom är att det I artikeln “PHP The Right Way” hänvisas till verktyg ”PHP Coding Standards Fixer” vilka är
                faktiska verktyg som hjälper dig att se till att din PHP-kod uppfyller en viss kodstandad. Det känns så här I efterhand ganska självklart
                att detta existerar, men när jag läste det första gången blev jag på riktigt chockad. Fantastiskt vilka verktyg och hjälpmedel det faktiskt
                finns. Kanske skulle jag titta och höra mig mer runtomkring när jag får problem men min kod generellt. Som extremt envis person är det
                inte alltid min första tanke, men så här långt in i utbildningen
                börjar jag förstå att det finns hjälp till nästan allt på nätet och man behöver inte uppfinna hjulet en gång till. </p>
                <h2 id="kmom02">kmom02</h2>
                <p>
                Klasser har olika relationer till varandra. Genom arv tar barn-klassen över föräldrar-klassens grundfunktion.
                Barnklassen kan besitta flera metoder och därmed ha utökad funktion än föräldraklassen.
                Liksom med relationen arv kan funktionalitet delas mellan klasser.
                Ibland önskas endast en mindre del kunna återanvändas. Då brukar man i stället använda trait. Det blir som att funktionen kopieras in i
                den önskade klassen och endast den delen kan återanvänds. Om ett objekt instansernas inuti ett objekt och alltid tillhör det objektet i
                programmet talas det om komposition. Kan ett objekt däremot instansernas utanför andra objekt är det i stället tal om aggregation.
                I detta fall kan alltså objektet leva vidare om det ägande objektet raderas, vilket då inte är möjligt vid komposition.
                Genom interface kan krav sättas för skapandet av klasser i andra klasser. Det fungerar som ett kontrakt där interface:t meddelar vilka
                krav som måste uppfyllas för att kunna instanserna objektet i klassen.
                </p>
                <p>
                Jag är nöjd med min implementation. Däremot hade jag missat att klassen CardHand skulle finnas med så jag skapade färdigt min kod utefter
                endast 2 klasser, Card och DeckIOfCards. Detta då jag även såg handen som en ”kortlek” då dom har samma uppgift, att hålla x antal kort.
                Detta löste jag enkelt med att CardHand ärvde från klass DeckOfCard och fick utökad funktion ”draw”. För att utveckla min kod hade jag
                kunnat använda mig av interface och trait. Jag kände mig dock inte tillräckligt påläst kring det för
                att börja implementera det i detta kmom, men ser det som utvecklingspotential. Även style är under utveckling och anses behövas förbättras.
                </p>
                <p>
                Från början kändes det helt omöjligt att hinna med samtliga krav för denna uppgift. Dels för att syntaxen med php fortfarande känns så ny .
                Bara en liten for-loop eller if-sats kunde ta,  i mina mått mätta, evigheter då jag
                var tvungen att kolla upp hur syntaxen ser ut. Efter en stund började det sätta sig såklart och jag fick till ett bra flow i arbetet.
                </p>
                <p>
                Mitt TIL i detta kmom är att läsa klart hela instruktionen innan jag börjar koda. Mycket fick jag ändra på under arbetets gång och jag hade
                sparat mycket tid om jag bara hade läst igenom, lagt upp en tydligare plan innan jag började koda. Jag är ganska otålig som person och vill
                alltid gärna sätta igång så fort som möjligt. Men det lönar sig inte alltid. Jag tror dock att detta kommer naturligt under min  egen
                utveckling. Det hade varit svårt för mig att börja med att rita ett uml-diagram, då jag inte kunde se den färdiga koden framför mig.
                Ju mer man övar och tänker objektorienterat, desto mer tror jag såklart att man kan ha en tydlig bild över relationerna innan man sätter igång.
                </p>
                <h2 id="kmom03">kmom03</h2>
                <p>

                </p>
                    Att innan man börjat kod försöka modellera ett kortspel med flödesdiagram och psuedokod var extremt svårt.
                    Jag var ganska säker på att jag kom långt med den kod jag hade från kmom02 och kunde därmed utgå från att grundkoden skulle vara densamma.
                    Det som inte implementerades i kmom02 var poängräkning vilket jag nu förstod att jag behövde implementera.
                    Jag tänkte att det enklaste var att beräkna poäng i respektive klass med en metod som sätter poängen för objektet.
                    Poängen går sedan att hämta frå sig för vare sig det är en hand genom CardHand.getPoints() eller om det är ett kort Card.getpoints().
                    Min psuedokod, eller rättare sagt tanke stämde ganska väl med vad som krävdes för att slutföra kmom03.
                <p>
                    Jag är som sagt mycket nöjd med min implementation från uppgiften. Både till utseende och funktion. Jag tycker jag gjorde den estetiskt tilltalande
                    och extra användarvänlig med tydligt stora ikoner och färdiga kort som bilder. Jag hade i slutet av uppgiften ganska mycket kod och ifsatser i mina routes
                    och det kändes inte helt rätt. Jag önskade få så lite kod som möjligt i scr och sorterade ut dessa i klasserna och dess metoder. Jag exempelvis ytterligare
                    för kontroll av ess i handen för att ändra poäng
                    från 14 till ett för just det kortet i handen.
                    Klassen för att beräkna resultatet fick även hålla meddelanden för flash så minimalt med if-satser kunde vara i CardGameController.
                </p>
                <p>
                    Det känns tryckt och roligt att koda i symfony. Jag känner fortfarande lite osäkerhet i just php-syntaxen men det går bättre för varje kmom.
                </p>
                <p>
                    Mitt TIL för detta kmom är nog att jag kan mer än vad jag faktiskt tror. Mina funderingar och vision inför detta kmom visade sig stämma ganska bra och liknar verkligen slutresultatet.
                    Jag har även förstått att jag är extremt kräsen rent estetiskt. Om inte korten eller spelplanen är i närheten av vad jag tycker är presentabelt har jag svårt att gå vidare med koden.
                    Detta är såklart en nackdel då det tar upp mycket tid från det funktionella som faktiskt är det viktigaste i slutändan. Men jag tänker också att om spelet
                    inte kan förstås eller användas på rätt sätt är det också ganska värdelöst. På något sätt lyckas jag få ihop det i slutändan ändå, detta då jag aldrig skulle ge mig.
                </p>
                <h2 id="kmom04">kmom04</h2>
                <p> Jag kände mig relativt bekant med skapande av tester av klasserna och dess metoder då jag gjort detta i python i tidigare kurs. Jag tycker det
                är roligt att utföra tester då det även kan ses som en testning av sig själv. Vad förvärntas med denna kod ? , minnns jag vad denna gjorde? , osv..
                Jag börjar sakta men säkert komma in i php-syntaxen och tycker att det känns mer logiskt och lättanvändt, även om jag behöver google vissa syntax-regler till och från.
                </p>
                <p>Jag blev mycket nöjd över att lyckas få kodtäckningen till över 90%. Det såg jag som en utmaning vilken inte var allt för svårt att uppnå. Jag har en loop i
                DeckOfCards-remove() vilken jag inte kommer åt att testa i dagsläget. Jag tänker mig att nyskapande av en metod för foorloopen kan lösa detta så att den loopen
                testas separat i klassen och anropas istället i remove().</p>
                <p>
                Jag tycker att min kod var relativt lätt och enkel att testa, vilket jag tolkar som att jag utfört ett bra jobb och har en relativt ren kod som grund. Det var skönt att
                se att det var relativt enkelt att utföra testningen och det känns som en bekräftelse på att man har tänkt rätt och byggt sin kod på ett föredelaktigt och snyggt sätt.
                Jag har idag inte valt att skriva om någon kod då det var relativt liten del av en metod som behövdes göras om. Jag kan inte se motiveringen eller
                logiken till att ha en separat metod i klassen vilken enbart utför en foor-loop och returnerar en array, även om det säkert löst så att jag uppnått 100% testbarhet. </p>
                <p>
                Mitt TIL för detta kmom är att jag nu börjar naturligt känna skillnaderna mellan språken och faktiskt kan "känna" på mig eller minnas hur en kod ska se ut i just php.
                Jag har haft svårt att ta in PHP och det har inte riktigt fastnat förens kanske i detta kmom.
                Jag har självfallet förstått språket och logiken i sig. Men har haft svårt att minns dom små delajerna som var_dump(), ;, $, och andra saker där python har motsvarande annat.
                I detta kmom tycker jag att det flöt på extremt mycket bättre och jag behävde tänka mindre på dom små detaljerna. Det flöt därmed på bra genom hela kmom04.
                Ett annat TIL är att jag
                mindes utföra commits flytande i princip efter varje stor föreänding i koden. Detta har ja tidagare missat att utföra och upptäckt först vid inlämning.
                </p>
                <h2 id="kmom05">kmom05</h2>
                <h2 id="kmom06">kmom06</h2>
                <h2 id="kmom10">kmom10</h2>
            </article>
        </div>
{% endblock %}