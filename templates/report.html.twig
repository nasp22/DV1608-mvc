{% extends "base.html.twig" %}

{% block title %}Redovisa{% endblock %}

{% block body %}
<div class="two-col-layout">
            <aside class="aside">
                <p> Genvägar: </p>
                <ul>
                <li><a href="#kmom01">kmom01</a></li>
                <li><a href="#kmom02">kmom02</a></li>
                <li><a href="#kmom03">kmom03</a></li>
                <li><a href="#kmom04">kmom04</a></li>
                <li><a href="#kmom05">kmom05</a></li>
                <li><a href="#kmom06">kmom06</a></li>
                <li><a href="#kmom10">kmom10</a></li>
                </ul>
            </aside>
            <article class="article">
                <h2 id="kmom01">kmom01</h2>
                <p>Tidigare kunskaper inom objektorientering har skapats i och med avklarade kurserna Oopython och Javascript.
                Jag anser mig efter dessa kurser börja förstå objektorientering och tankesättet kring detta. Det är ett sätt att arbeta och tänka
                på och kräver planering/rätt tänk från början. Det var som svårast att gå från Python-kursen till Oopython.
                Just därför att planeringen verkligen kräver att man från början tänker objektorienterat. Nu känns det mer naturligt.</p>
                <p>
                Strukturen i PHP av klasser och objekt känns därmed inte helt främmade och den ser relativt likadan ut.
                Det består av ”properies” vilka sätter ett ”state” till respektive objekt och följt av ”metoder” vilka är funktioner som vi kan
                göra i klassen för att på olika sätt påverka objektet eller få utskrifter. På samma sätt i
                både Javascirpt och Python kan en ”constructor” sättas viken då sätter ingående argument vid
                skapande av objektet, som en slags init-funktion. </p>
                <p>Kodbasen och strukturen känns inte främmande. Det är som en kombination av tidigare uppbyggnad
                från kurserna javascript, Oopython och Webtec.
                Det som känns mest främmande nu är syntaxen för just PHP vilket känns som en lång tid
                sedan vi arbetade med. Men det kommer man nog snart in i igen. </p>
                <p>Mitt TIL för detta kmom är att det I artikeln “PHP The Right Way” hänvisas till verktyg ”PHP Coding Standards Fixer” vilka är
                faktiska verktyg som hjälper dig att se till att din PHP-kod uppfyller en viss kodstandad. Det känns så här I efterhand ganska självklart
                att detta existerar, men när jag läste det första gången blev jag på riktigt chockad. Fantastiskt vilka verktyg och hjälpmedel det faktiskt
                finns. Kanske skulle jag titta och höra mig mer runtomkring när jag får problem men min kod generellt. Som extremt envis person är det
                inte alltid min första tanke, men så här långt in i utbildningen
                börjar jag förstå att det finns hjälp till nästan allt på nätet och man behöver inte uppfinna hjulet en gång till. </p>
                <h2 id="kmom02">kmom02</h2>
                <p>
                Klasser har olika relationer till varandra. Genom arv tar barn-klassen över föräldrar-klassens grundfunktion.
                Barnklassen kan besitta flera metoder och därmed ha utökad funktion än föräldraklassen.
                Liksom med relationen arv kan funktionalitet delas mellan klasser.
                Ibland önskas endast en mindre del kunna återanvändas. Då brukar man i stället använda trait. Det blir som att funktionen kopieras in i
                den önskade klassen och endast den delen kan återanvänds. Om ett objekt instansernas inuti ett objekt och alltid tillhör det objektet i
                programmet talas det om komposition. Kan ett objekt däremot instansernas utanför andra objekt är det i stället tal om aggregation.
                I detta fall kan alltså objektet leva vidare om det ägande objektet raderas, vilket då inte är möjligt vid komposition.
                Genom interface kan krav sättas för skapandet av klasser i andra klasser. Det fungerar som ett kontrakt där interface:t meddelar vilka
                krav som måste uppfyllas för att kunna instanserna objektet i klassen.
                </p
                <p>
                Jag är nöjd med min implementation. Däremot hade jag missat att klassen CardHand skulle finnas med så jag skapade färdigt min kod utefter
                endast 2 klasser, Card och DeckIOfCards. Detta då jag även såg handen som en ”kortlek” då dom har samma uppgift, att hålla x antal kort.
                Detta löste jag enkelt med att CardHand ärvde från klass DeckOfCard och fick utökad funktion ”draw”. För att utveckla min kod hade jag
                kunnat använda mig av interface och trait. Jag kände mig dock inte tillräckligt påläst kring det för
                 att börja implementera det i detta kmom, men ser det som utvecklingspotential. Även style är under utveckling och anses behövas förbättras.
                </p
                <p>
                Från början kändes det helt omöjligt att hinna med samtliga krav för denna uppgift. Dels för att syntaxen med php fortfarande känns så ny .
                Bara en liten for-loop eller if-sats kunde ta,  i mina mått mätta, evigheter då jag
                var tvungen att kolla upp hur syntaxen ser ut. Efter en stund började det sätta sig såklart och jag fick till ett bra flow i arbetet.
                </p
                <p>
                Mitt TIL i detta kmom är att läsa klart hela instruktionen innan jag börjar koda. Mycket fick jag ändra på under arbetets gång och jag hade
                sparat mycket tid om jag bara hade läst igenom, lagt upp en tydligare plan innan jag började koda. Jag är ganska otålig som person och vill
                alltid gärna sätta igång så fort som möjligt. Men det lönar sig inte alltid. Jag tror dock att detta kommer naturligt under min  egen
                utveckling. Det hade varit svårt för mig att börja med att rita ett uml-diagram, då jag inte kunde se den färdiga koden framför mig.
                Ju mer man övar och tänker objektorienterat, desto mer tror jag såklart att man kan ha en tydlig bild över relationerna innan man sätter igång.
                </p>
                <h2 id="kmom03">kmom03</h2>
                <h2 id="kmom04">kmom04</h2>
                <h2 id="kmom05">kmom05</h2>
                <h2 id="kmom06">kmom06</h2>
                <h2 id="kmom10">kmom10</h2>
            </article>
        </div>
{% endblock %}